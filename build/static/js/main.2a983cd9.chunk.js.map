{"version":3,"sources":["TimeCount.js","App.js","index.js"],"names":["TimeCount","useState","starttime","endtime","break","totalHours","answer","time","setTime","error","setError","handleChange","e","target","name","value","getTimeFromMins","mins","h","m","totalHour","moment","utc","hours","minutes","format","afterBreak","afterBreakFunc","diff","className","Grid","container","justifyContent","my","role","xmlns","width","height","fill","viewBox","d","item","lg","xs","md","htmlFor","type","id","onChange","onClick","style","margin","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a983cd9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Grid } from '@mui/material'\nimport moment from \"moment-timezone\";\n\nconst TimeCount = () => {\n  const [time, setTime] = useState({\n    starttime: \"\", endtime: \"\", break: \"\", totalHours: \"\", answer:false\n  });\n  const [error, setError] = useState(false)\n\n  // handleChange function called when page input changes\n  const handleChange = (e) => {\n    setError(false)\n    setTime({...time, [e.target.name]:e.target.value})\n  };\n\n  // getTimeFromMins gives you exact time in hours from minutes\n  function getTimeFromMins(mins) {\n    let h = mins / 60 | 0, m = mins % 60 | 0;\n    let totalHour = moment.utc().hours(h).minutes(m).format(\"hh:mm\")\n    const afterMinus = moment(totalHour, \"hh:mm\").diff(moment(`00:${time.break}`, \"hh:mm\"), 'minutes')\n    afterBreakFunc(afterMinus)\n  }\n\n  // afterBreakFunc gives you the total working hours from your totalTime after reducing the break time.\n  function afterBreakFunc(mins) {\n    let h = mins / 60 | 0, m = mins % 60 | 0;\n    let afterBreak = moment.utc().hours(h).minutes(m).format(\"hh:mm\")\n    setTime({...time, totalHours: afterBreak, answer:true })\n  }\n\n  // handlesubmit function calculate the time after user submitted all inputs.\n  const handlesubmit = () => { \n    if(!time.starttime || !time.endtime){\n      setError(true)\n      setTime({...time, answer:false})\n    } else {\n      const totalWorkedTime = moment(time.endtime, \"hh:mm\").diff(moment(time.starttime, \"hh:mm\"), 'minutes')\n      getTimeFromMins(totalWorkedTime)\n    }\n    \n  }\n\n  return (\n    <div className=\"text-center\">\n      <div className=\"bg-light text-dark p-4\">\n        <h1>‚è± Time Tracker ‚è±</h1>\n      </div>\n      <hr className=\"my-5\" />\n\n          {error && <Grid container justifyContent=\"center\" my={2}> \n          <div className=\"alert alert-danger d-flex align-items-center w-25\" role=\"alert\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill flex-shrink-0 me-2\" viewBox=\"0 0 16 16\" role=\"img\" aria-label=\"Warning:\">\n                <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n              </svg>\n              <div> Please fill Start Time and End Time !!! </div>\n            </div> </Grid>}\n\n          <Grid container justifyContent=\"center\" my={2}> \n              <Grid item lg={1} xs={3} md={3}>\n                  <label className=\"mt-2 float-end\" htmlFor=\"starttime\">Start Time : </label>\n              </Grid>\n              <Grid item lg={2} xs={5} md={5}>\n                  <input type=\"time\" name=\"starttime\" className=\"form-control mx-2\" id=\"starttime\" value={time.starttime} onChange={(e) => handleChange(e) } />\n              </Grid>\n          </Grid>\n\n          <Grid container justifyContent=\"center\" my={2}> \n              <Grid item lg={1} xs={3} md={3}>\n                <label className=\"mt-2 float-end\" htmlFor=\"break\">Break :</label>\n              </Grid>\n              <Grid item lg={2} xs={5} md={5}>\n                <input type=\"text\" name=\"break\" className=\"form-control mx-2\" id=\"break\" value={time.break} onChange={(e) => handleChange(e) } />\n              </Grid>\n          </Grid>\n\n          <Grid container justifyContent=\"center\" my={2}> \n              <Grid item lg={1} xs={3} md={3}>\n              <label className=\"mt-2 float-end\" htmlFor=\"endtime\">End Time :</label>\n              </Grid>\n              <Grid item lg={2} xs={5} md={5}>\n              <input type=\"time\" name=\"endtime\" className=\"form-control mx-2\" id=\"endtime\" value={time.endtime} onChange={(e) => handleChange(e) } />\n              </Grid>\n          </Grid>\n        \n      <hr className=\"my-5\" />\n      <button className=\"btn btn-outline-light w-25\" onClick={() => handlesubmit()}>Submit</button>\n\n      {time.answer && <div className=\"bg-light text-dark p-4\" style={{margin: '5rem 0'}}>\n              <h1>üéâ üéâ  Great ! You Worked <span className=\"text-danger\">{time.totalHours}</span> hours  üéâ üéâ</h1>\n      </div> }\n\n      \n    </div>\n    );\n};\n\nexport default TimeCount;\n","import TimeCount from './TimeCount'\nfunction App() {\n  return (\n    <div className=\"mt-5\">\n      <TimeCount />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}